--------------------------------
sortedtype.h
--------------------------------
#ifndef SORTEDTYPE_H_INCLUDED
#define SORTEDTYPE_H_INCLUDED
const int max_items = 5;
template <class T>
class SortedType
{
public:
    SortedType();
    void makeEmpty();
    bool isEmpty();
    bool isFull();
    int lengthIs();
    void insertItem(T);
    void deleteItem(T);
    void resetList();
    void getNextItem(T &);
    void retriveItem(T &, bool &);

private:
    int length;
    int currentPos;
    T info[max_items];
};
#endif // SORTEDTYPE_H_INCLUDED




--------------------------------
sortedtype.cpp
--------------------------------
#include "sortedtype.h"

#include <iostream>
using namespace std;

template <class T>
SortedType<T>::SortedType()
{
    length = 0;
    currentPos = -1;
}

template <class T>
void SortedType<T>::makeEmpty()
{
    length = 0;
}

template <class T>
bool SortedType<T>::isEmpty()
{
    return (length == 0);
}

template <class T>
bool SortedType<T>::isFull()
{
    return (length == max_items);
}

template <class T>
int SortedType<T>::lengthIs()
{
    return length;
}

template <class T>
void SortedType<T>::insertItem(T item)
{
    int position = 0;
    bool tS = (position < length);
    while (tS)
    {
        if (item > info[position])
        {
            position++;
            tS = (position < length);
        }
        else if (item < info[position])
            tS = false;
    }
    for (int index = length; index > position; index--)
        info[index] = info[index - 1];
    info[position] = item;
    length++;
}

template <class T>
void SortedType<T>::deleteItem(T item)
{
    int position = 0;
    while (item != info[position])
        position++;
    for (int index = position + 1; index < length; index++)
        info[index - 1] = info[index];
    length--;
}

template <class T>
void SortedType<T>::resetList()
{
    currentPos = -1;
}

template <class T>
void SortedType<T>::getNextItem(T &item)
{
    currentPos++;
    item = info[currentPos];
}

template <class T>
void SortedType<T>::retriveItem(T &item, bool &found)
{
    int mid, first = 0, last = length - 1;
    bool tS = (first <= last);
    found = false;
    while (tS && !found)
    {
        mid = (first + last) / 2;
        if (item < info[mid])
        {
            last = mid - 1;
            tS = (first <= last);
        }
        else if (item > info[mid])
        {
            first = mid + 1;
            tS = (first <= last);
        }
        else
        {
            found = true;
            item = info[mid];
        }
    }
}




--------------------------------
timeStamp.h
--------------------------------
#ifndef TIMESTAMP_H_INCLUDED
#define TIMESTAMP_H_INCLUDED

class timeStamp
{
private:
    int second;
    int minute;
    int hour;

public:
    timeStamp();
    timeStamp(int, int, int);
    bool operator==(timeStamp);
    bool operator!=(timeStamp);
    bool operator<(timeStamp);
    bool operator>(timeStamp);
    friend ostream &operator<<(ostream &, timeStamp &);
};

#endif // TIMESTAMP_H_INCLUDED




--------------------------------
timeStamp.cpp
--------------------------------
#include "timeStamp.h"
#include <iostream>

using namespace std;

timeStamp::timeStamp()
{
}
timeStamp::timeStamp(int second, int minute, int hour)
{
    this->second = second;
    this->minute = minute;
    this->hour = hour;
}

bool timeStamp::operator==(timeStamp t)
{
    if ((second == t.second) && (minute == t.minute) && (hour == t.hour))
        return true;
    else
        return false;
}

bool timeStamp::operator!=(timeStamp t)
{
    if (!(second == t.second) && (minute == t.minute) && (hour == t.hour))
        return true;
    else
        return false;
}

bool timeStamp::operator>(timeStamp t)
{
    if ((hour > t.hour) || ((hour == t.hour) && (minute > t.minute)) || ((hour == t.hour) && (minute == t.minute) && (second > t.second)))
        return true;
    else
        return false;
}

bool timeStamp::operator<(timeStamp t)
{
    if ((hour < t.hour) || ((hour == t.hour) && (minute < t.minute)) || ((hour = t.hour) && (minute == t.minute) && (second < t.second)))
        return true;
    else
        return false;
}

ostream &operator<<(ostream &os, timeStamp &t)
{
    os << t.second << ":" << t.minute << ":" << t.hour;
    return os;
}




--------------------------------
main.cpp
--------------------------------
#include <iostream>
#include "sortedtype.cpp"
#include "timestamp.cpp"

using namespace std;

int main()
{
    //creating a list of integers
    SortedType<int> ol;

    //checking if the list is empty
    if (ol.isEmpty())
    {
        cout << "The list is empty!" << endl;
    }
    else
    {
        cout << "The list is not empty!" << endl;
    }

    //inserting five items
    int temp;
    for (int i = 0; i < 5; i++)
    {
        cin >> temp;
        ol.insertItem(temp);
    }

    //printing the list
    cout << endl;
    for (int i = 0; i < ol.lengthIs(); i++)
    {
        ol.getNextItem(temp);
        cout << temp << "\t";
    }
    ol.resetList();

    //checking if the list is full or not
    cout << endl;
    if (ol.isFull())
    {
        cout << "The list is full!";
    }
    else
    {
        cout << "The list is not full!";
    }

    //deleting 3
    ol.deleteItem(3);

    //printing the list again
    cout << endl;
    for (int i = 0; i < ol.lengthIs(); i++)
    {
        ol.getNextItem(temp);
        cout << temp << "\t";
    }
    ol.resetList();

    //checking if the list is full or not
    cout << endl;
    if (ol.isFull())
    {
        cout << "The list is full!";
    }
    else
    {
        cout << "The list is not full!";
    }

    //creating list of objects of class timeStamp
    SortedType<timeStamp> timeStamps;

    //Inserting 5 time values in the format ssmmhh
    timeStamp ts_1(15, 34, 23);
    timeStamp ts_2(45, 12, 12);
    timeStamp ts_3(35, 12, 6);
    timeStamp ts_4(12, 40, 18);
    timeStamp ts_5(12, 12, 12);

    timeStamps.insertItem(ts_1);
    timeStamps.insertItem(ts_2);
    timeStamps.insertItem(ts_3);
    timeStamps.insertItem(ts_4);
    timeStamps.insertItem(ts_5);

    //printing the timestamp list
    cout << endl
         << endl;
    timeStamp timeStamp_temp;
    for (int i = 0; i < timeStamps.lengthIs(); i++)
    {
        timeStamps.getNextItem(timeStamp_temp);
        cout << timeStamp_temp << "\n";
    }
    timeStamps.resetList();

    //deleting one timestmap
    timeStamps.deleteItem(ts_5);

    //printing the timestamp list again
    cout << endl
         << endl;
    for (int i = 0; i < timeStamps.lengthIs(); i++)
    {
        timeStamps.getNextItem(timeStamp_temp);
        cout << timeStamp_temp << "\n";
    }
    timeStamps.resetList();

    //checking if the list is full or not
    cout << endl;
    if (timeStamps.isFull())
    {
        cout << "The list is full!";
    }
    else
    {
        cout << "The list is not full!";
    }

    return 0;
}